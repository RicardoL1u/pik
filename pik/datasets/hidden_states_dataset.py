import pandas as pd
import numpy as np
import torch
from torch.utils.data import Dataset

class HiddenStatesDataset(Dataset):
	'''
	Loads the hidden states dataset and text generations from files generated by `generate.py`.
	'''
	def __init__(self,
		hs_file='hidden_states.pt',
		tg_file='text_generations.csv',
		precision=torch.float16,
		last_layer_only=True,
		device='cuda',
	):
		hs = torch.load(hs_file, map_location=device).type(precision)
		assert hs.dim() in (2, 3)
		if not last_layer_only and hs.dim() == 3:
			hs = hs.reshape(hs.shape[0], hs.shape[1] * hs.shape[2])
		elif last_layer_only and hs.dim() == 3:
			hs = hs[:, -1, :]
		self.hidden_states = hs
		self.text_generations = pd.read_csv(tg_file)
		self.pik_labels = np.array([
			self.text_generations.query('hid == @hid')['evaluation'].mean()
   			for hid in range(self.hidden_states.shape[0])
		])

	def __len__(self):
		return self.text_generations.shape[0]

	def __getitem__(self, i):
		hid = self.text_generations.loc[i, 'hid']
		return (
			self.hidden_states[hid],
			self.text_generations.loc[i, 'evaluation']
		)
  
	def get_pik_label(self, hid):
		return self.pik_labels[hid]